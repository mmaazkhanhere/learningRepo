// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
// use the following command to install primsa client 'npm install @prisma/client
//create a folder called 'lib' and create a file called prismadb.ts'


model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  //represents unique identifier for the User model. It is of type string, marked
  //as a primary key (@id), with an autogenerated value (@default(auto())).
  //the (@map("_id")) directive specifies that this should be mapped to the "id"
  //field in MongoDB. (@db.ObjectId) indicates that the field should be treated
  //as an ObjectId in the database
  name String //name of user
  image String? //optional image of user
  email String? @unique //optional email and should be unique
  emailVerified DateTime? //optional date
  hashedPassword String? //for credential password ans is optional
  createdAt DateTime @default(now()) //when user was created and has default value of current time
  updatedAt DateTime @updatedAt //when user detail was updated and automatically uses the time when updated
  sessions Session[] 
  accounts Account[]
  favoriteIds String[] @db.ObjectId //list of like movies ids
}


model Account {
  //The `model Account` represents a user account in the database. It will be created
  //once we create our Google account or Github account 
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @db.ObjectId //id of the user
  type               String //represents the type of account
  provider           String //represents the provider of the account
  providerAccountId  String //provider specific id
  refresh_token      String?  @db.String //refresh token associated with id (optional)
  access_token       String?  @db.String //access token associated with the id (optional)
  expires_at         Int? // represents expiration time of the token (optional)
  token_type         String? //represents the type of token (optional)
  scope              String? //represents the scope of account
  id_token           String?  @db.String //represents ID token associated with the account
  session_state      String? 

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  //establishes a relation between the Account and User models. If a user is deleted
  //associated accounts will also be deleted.
  @@unique([provider, providerAccountId])
  //defines a unique constraint on the combination of the 'provider' and 'providerAccount',
  //ensuring that each pair is unique across all accounts
}


model Session {
  //The `model Session` represents a user session in the database.
  id String @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String @unique // a unique session token associated with the session
  userId String @db.ObjectId //represents the userid associated with the session
  expires DateTime //represents the expiration date and time of the session
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  //Establish a relation between User and Session. The 'userId; in the Session 
  //model reference the 'id' field in the User model. If a user is deleted,
  //associated session will also be deleted
}


model VerificationToken {
  //The `model VerificationToken` represents a verification token in the database. 
  //It is used for verifying user accounts or email addresses.
  id String @id @default(auto()) @map("_id") @db.ObjectId
  identifier String //represents the identifier associated with the verification token
                  //This identifier could be used to link the token to a specific user or email
  token      String   @unique //represent the verification token itself and is unique.
  expires    DateTime //represents the expiration date of the verification token

  @@unique([identifier, token])
  //unique constraint on the combination od identifier and token fields, ensuring that
  //each pair is unique across all verification tokens.
}


model Movie {
  //The `model Movie` represents a movie in the database. It has several fields 
  //that store information about the movie, such as its title, description, 
  //video URL, thumbnail URL, genre, and duration.
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String //title of the movie
  description String //synopsis or description of the movie
  videoUrl String //url of the video
  thumbnailUrl String //url of movie thumbnail
  genre String //genre of the movie
  duration String //movie duration
}

//after it, run the command 'npx prisma db push'